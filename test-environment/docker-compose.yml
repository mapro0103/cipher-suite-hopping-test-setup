services:
  sender:
    build: ./sender
    container_name: sender
    networks:
      test_net:
        ipv4_address: ${IP_SENDER}
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    cap_add:
      - NET_ADMIN
    stdin_open: true
    tty: true
    
  receiver:
    build: ./receiver
    container_name: receiver
    networks:
      test_net:
        ipv4_address: ${IP_RECEIVER}
    depends_on:
      - sender
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./cert.pem:/app/cert.pem
      - ./key.pem:/app/key.pem
    cap_add:
      - NET_ADMIN
  
  intermediate:
    build: ./intermediate
    container_name: intermediate
    networks:
      test_net:
        ipv4_address: ${IP_INTERMEDIATE}
    #network_mode: "container:sender"
    depends_on:
      - sender
      - receiver
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    sysctls:
      - net.ipv4.ip_forward=1
    cap_add:
      - NET_ADMIN

  monitor:
    build: ./monitor
    container_name: monitor
    networks:
      test_net:
        ipv4_address: ${IP_MONITOR}
    depends_on:
      - intermediate
    environment:
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./monitor_pcap_data:/tmp
    sysctls:
      - net.ipv4.ip_forward=0
    
networks:
  test_net:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: ${SUBNET_TEST_NET}